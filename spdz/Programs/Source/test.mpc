from Compiler.util import if_else
from Compiler.types import Array, Matrix, sint, regint, sfix, MemValue
from Compiler.library import do_while, if_, if_e, else_, print_ln, for_range

program.bit_length = 32

INDEX_SIZE = 6


def accumulate_inputs(slength, inputs, index_count, total_count):
    for j in range(0, INDEX_SIZE * 2, 2):

        # is it a valid entry or to be ignored
        is_valid = (j + 1) < slength

        @if_(is_valid.reveal() == 1)
        def valid_input():
            # Search for both match on index posn and last empty (0) position
            matchIndex = Array(1, sint)
            matchIndex[0] = sint(-1)

            emptyIndex = Array(1, sint)
            emptyIndex[0] = sint(-1)

            @for_range(INDEX_SIZE)
            def loop_body(k):
                is_match = inputs[j] == index_count[k][0]

                index_count[k][1] = if_else(
                    is_match, index_count[k][1] + inputs[j], index_count[k][1])

                matchIndex[0] = if_else(is_match, k, matchIndex[0])

                is_empty = sint(0) == index_count[k][0]
                emptyIndex[0] = if_else(is_empty, k, emptyIndex[0])

            match_index = regint(matchIndex[0].reveal())
            insert_index = regint(emptyIndex[0].reveal())
            print_ln('Entry %s, %s match_index %s insert_index %s.',
                     inputs[j].reveal(), inputs[j + 1].reveal(), match_index,
                     insert_index)

            total_count.write(total_count + inputs[j + 1])


index_count = Matrix(INDEX_SIZE, 2, sint)
index_count.assign_all(0)

total_count = MemValue(sint(0))

slength = sint(6)

inputs = [
    sint(12),
    sint(100),
    sint(15),
    sint(200),
    sint(20),
    sint(300),
    sint(0),
    sint(0),
    sint(0),
    sint(0),
    sint(0),
    sint(0)
]

accumulate_inputs(slength, inputs, index_count, total_count)

for i in range(INDEX_SIZE):
    print_ln('Accumulator %s, %s', index_count[i][0].reveal(),
             index_count[i][1].reveal())
